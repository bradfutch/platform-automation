resource_types:
- name: pivnet
  type: docker-image
  source:
    repository: pivotalcf/pivnet-resource
    tag: latest-final

resources:
- name: daily
  type: time
  source:
    interval: 24h

- name: config
  type: git
  source:
    private_key: ((configuration.private_key))
    uri: ((configuration.uri))
    branch: master
    submodules: all
    depth: 1

- name: healthwatch-product
  type: s3
  source:
    access_key_id: ((access_key_id))
    bucket: ((pivnet_bucket))
    region_name: ((region_name))
    secret_access_key: ((secret_access_key))
    regexp: \[p-healthwatch,(.*)\]p-healthwatch-.*.pivotal

- name: healthwatch-stemcell
  type: s3
  source:
    access_key_id: ((access_key_id))
    bucket: ((pivnet_bucket))
    region_name: ((region_name))
    secret_access_key: ((secret_access_key))
    regexp: healthwatch-stemcell/\[stemcells-ubuntu-xenial,(.*)\]bosh-stemcell-.*-vsphere.*\.tgz

- name: opsman-product
  type: s3
  source:
    access_key_id: ((access_key_id))
    bucket: ((pivnet_bucket))
    region_name: ((region_name))
    secret_access_key: ((secret_access_key))
    regexp: \[ops-manager,(.*)\].*.ova

- name: pas-product
  type: s3
  source:
    access_key_id: ((access_key_id))
    bucket: ((pivnet_bucket))
    region_name: ((region_name))
    secret_access_key: ((secret_access_key))
    regexp: \[elastic-runtime,(.*)\]cf-.*.pivotal

- name: pas-stemcell
  type: s3
  source:
    access_key_id: ((access_key_id))
    bucket: ((pivnet_bucket))
    region_name: ((region_name))
    secret_access_key: ((secret_access_key))
    regexp: pas-stemcell/\[stemcells-ubuntu-xenial,(.*)\]bosh-stemcell-.*-vsphere.*\.tgz

- name: pas-windows-product
  type: s3
  source:
    access_key_id: ((access_key_id))
    bucket: ((pivnet_bucket))
    region_name: ((region_name))
    secret_access_key: ((secret_access_key))
    regexp: \[pas-windows,(.*)\]pas-windows-.*.pivotal

- name: platform-automation-pivnet
  type: pivnet
  source:
    api_token: ((pivnet_api_token))
    product_slug: platform-automation
    product_version: 2\.(.*)
    sort_by: semver

- name: platform-automation-tasks
  type: s3
  source:
    access_key_id: ((access_key_id))
    bucket: ((pivnet_bucket))
    region_name: ((region_name))
    secret_access_key: ((secret_access_key))
    regexp: platform-automation-tasks-(.*).zip

- name: platform-automation-image
  type: s3
  source:
    access_key_id: ((access_key_id))
    bucket: ((pivnet_bucket))
    region_name: ((region_name))
    secret_access_key: ((secret_access_key))
    regexp: platform-automation-image-(.*).tgz

jobs:
- name: fetch-healthwatch
  plan:
  - aggregate:
    - get: platform-automation-image
      params:
        unpack: true
    - get: platform-automation-tasks
      params:
        unpack: true
    - get: config
  - task: download-healthwatch-product-and-stemcell
    image: platform-automation-image
    file: platform-automation-tasks/tasks/download-product.yml
    params:
      CONFIG_FILE: download-product-configs/healthwatch.yml
      VARS_FILE: vars.yml
      ENV_FILE: env.yml
    output_mapping: {downloaded-stemcell: healthwatch-stemcell}
  - aggregate:
    - put: healthwatch-product
      params:
        file: downloaded-product/*.pivotal
    - put: healthwatch-stemcell
      params:
        file: healthwatch-stemcell/*.tgz

- name: fetch-opsman
  plan:
  - aggregate:
    - get: platform-automation-image
      params:
        unpack: true
    - get: platform-automation-tasks
      params:
        unpack: true
    - get: config
  - task: download-opsman-image
    image: platform-automation-image
    file: platform-automation-tasks/tasks/download-product.yml
    params:
      CONFIG_FILE: download-product-configs/opsman.yml
      VARS_FILE: vars.yml
      ENV_FILE: env.yml
  - aggregate:
    - put: opsman-product
      params:
        file: downloaded-product/*

- name: fetch-pas
  plan:
  - aggregate:
    - get: platform-automation-image
      params:
        unpack: true
    - get: platform-automation-tasks
      params:
        unpack: true
    - get: config
  - task: download-pas-product-and-stemcell
    image: platform-automation-image
    file: platform-automation-tasks/tasks/download-product.yml
    params:
      CONFIG_FILE: download-product-configs/pas.yml
      VARS_FILE: vars.yml
      ENV_FILE: env.yml
    output_mapping: {downloaded-stemcell: pas-stemcell}
  - aggregate:
    - put: pas-product
      params:
        file: downloaded-product/*.pivotal
    - put: pas-stemcell
      params:
        file: pas-stemcell/*.tgz

- name: fetch-pas-windows
  plan:
  - aggregate:
    - get: platform-automation-image
      params:
        unpack: true
    - get: platform-automation-tasks
      params:
        unpack: true
    - get: config
  - task: download-pas-windows-product
    image: platform-automation-image
    file: platform-automation-tasks/tasks/download-product.yml
    params:
      CONFIG_FILE: download-product-configs/pas-windows.yml
      VARS_FILE: vars.yml
      ENV_FILE: env.yml
  - aggregate:
    - put: pas-windows-product
      params:
        file: downloaded-product/*.pivotal

- name: fetch-platform-automation
  # We use the pivnet resource to bootstrap the pipeline,
  # and because this product is part of the pipeline, not the foundation
  plan:
  - get: platform-automation-pivnet
    trigger: true
  - aggregate:
    - put: platform-automation-tasks
      params:
        file: platform-automation-pivnet/*tasks*.zip
    - put: platform-automation-image
      params:
        file: platform-automation-pivnet/*image*.tgz
