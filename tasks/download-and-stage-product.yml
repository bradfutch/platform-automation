# The inputs, outputs, params, filename, and filepath
# of this task file are part of its semantically versioned API.
# See our documentation for a detailed discussion of our semver API.
# See www.semver.org for an explanation of semantic versioning.

# code_snippet download-and-stage start yaml
---
platform: linux

inputs:
- name: state_dir
- name: automation_repo
  optional: true
- name: secrets
  # secret files to be made available
  # separate from vars, so they can be store securely
  optional: true

outputs:
- name: downloaded-product
- name: downloaded-stemcell
- name: assign-stemcell-config

caches:
- path: downloaded-files

params:
  config_file: download-config.yml
  # - Filepath to the product configuration yaml file
  # - The path is relative to the root of the `config` input
  pivnet_api_token:
  pivnet_file_glob:
  pivnet_product_slug:
  product_version_regex:
  stemcell_iaas:
  state_file: metadata
  env_file: 
  output_directory: downloaded-files

run:
  path: bash
  args:
  - "-c"
  - |
    cat /var/version && echo ""
    set -eux

    apt-get update
    apt-get install -y jq

    cat state_dir/"${state_file}" | jq -r .ops_manager_dns | xargs -I# sed -i.bak  's/target:.*$/target: #/g' automation_repo/"${env_file}"

    # ${vars_files_args[@] needs to be globbed to pass through properly
    # shellcheck disable=SC2068
    om download-product \
       --config automation_repo/"${config_file}" \
       --output-directory "${output_directory}" \
       --pivnet-api-token "${pivnet_api_token}" \
       --pivnet-file-glob "${pivnet_file_glob}" \
       --pivnet-product-slug "${pivnet_product_slug}" \
       --product-version-regex "${product_version_regex}" \
       --stemcell-iaas "${stemcell_iaas}"

    product_file=$(om interpolate \
      --config downloaded-files/download-file.json \
      --path /product_path)

    stemcell_file=$(om interpolate \
      --config downloaded-files/download-file.json \
      --path /stemcell_path?)

    cp "$product_file" downloaded-product

    if [ -e "$stemcell_file" ]; then
      cp "$stemcell_file" downloaded-stemcell
    fi

    if [ -e downloaded-files/assign-stemcell.yml ]; then
      cp downloaded-files/assign-stemcell.yml assign-stemcell-config/config.yml
    fi

    # UPLOAD AND STAGE

    if [ -z "automation_repo/configs/${config_file}" ]; then
        om --env automation_repo/"${env_file}" upload-product \
           --product ${product_file}
    else
      om --env automation_repo/"${env_file}" upload-product \
         --product ${product_file} --config "automation_repo/configs/${config_file}"
    fi

    product_name="$(om tile-metadata \
      --product-path "${product_file}"  \
      --product-name)"
    product_version="$(om tile-metadata \
      --product-path "${product_file}"  \
      --product-version)"

    om --env automation_repo/"${env_file}" stage-product \
       --product-name "${product_name}" \
       --product-version "${product_version}"

    # code_snippet assign-stemcell-support end
# code_snippet download-product end
